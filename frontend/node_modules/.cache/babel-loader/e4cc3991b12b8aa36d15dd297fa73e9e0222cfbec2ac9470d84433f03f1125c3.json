{"ast":null,"code":"var _jsxFileName = \"/Users/francescomarinelli/Desktop/University/Thesis/interviews-web-mobile-assignment/frontend/src/App.js\";\nimport './App.css';\nimport Post from './Post.js';\nimport CreatePost from './CreatePost.js';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      posts: [],\n      loaded: 0\n    };\n    this.removePostFromState = this.removePostFromState.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n  fetchData() {\n    let url = 'https://jsonplaceholder.typicode.com/posts';\n    fetch(url).then(resp => resp.json()).then(resp => {\n      this.setState({\n        posts: resp,\n        loaded: 15\n      });\n    });\n    console.log(\"Fetch concluded\");\n  }\n\n  // the list of posts will be filled after the component is mounted\n  componentDidMount() {\n    this.fetchData();\n  }\n  removePostFromState(id) {\n    fetch('https://jsonplaceholder.typicode.com/posts/' + id, {\n      method: 'DELETE'\n    });\n    let updatingArray = this.state.posts.slice();\n    let index = updatingArray.findIndex(item => item.id === id);\n    updatingArray.splice(index, 1);\n    this.setState({\n      posts: updatingArray\n    });\n  }\n  handleUpdate(event) {\n    event.preventDefault();\n    let id = event.target.id.value.trim();\n    if (!id || !event.target.title.value.trim().length && !event.target.body.value.trim().length && !event.target.userId.value.trim().length) {\n      alert(\"Fill all the fields properly\");\n      return;\n    }\n    if (isNaN(id)) {\n      alert(\"The id must be a number\");\n      return;\n    }\n    let index = this.state.posts.findIndex(item => item.id === id);\n    if (index === -1) {\n      alert(\"The post you want to update is not present\");\n      return;\n    }\n    let item = this.state.posts[index];\n    let userId = !event.target.userId.value.trim().length ? item.userId : event.target.userId.value;\n    let title = !event.target.title.value.trim().length ? item.title : event.target.title.value;\n    let body = !event.target.body.value.trim().length ? item.body : event.target.body.value;\n    if (isNaN(userId)) {\n      alert(\"The userId must be a number\");\n      return;\n    }\n    console.log(id);\n    fetch('https://jsonplaceholder.typicode.com/posts/' + id, {\n      method: 'PUT',\n      body: JSON.stringify({\n        id: id,\n        title: title,\n        body: body,\n        userId: userId\n      }),\n      headers: {\n        'Content-type': 'application/json; charset=UTF-8'\n      }\n    }).then(response => response.json()).then(json => console.log(json));\n    alert(\"Post updated\");\n    document.getElementById(\"create-post-form\").reset();\n    let newItem = {};\n    newItem.id = id;\n    newItem.title = title;\n    newItem.body = body;\n    newItem.userId = userId;\n    let updatingArray = this.state.posts.slice();\n    updatingArray.splice(index, 1, newItem);\n    this.setState({\n      posts: updatingArray\n    });\n  }\n  handleScroll(e) {\n    const bottomReached = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n    if (bottomReached) {}\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      onScroll: this.handleScroll,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Welcome to the Beautiful Collection of Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          className: \"create-summary\",\n          children: \"Add a new post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(CreatePost, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"details\", {\n        children: [/*#__PURE__*/_jsxDEV(\"summary\", {\n          className: \"update-summary\",\n          children: \"Modify an existing post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"update-post-form\",\n          className: \"post-form\",\n          onSubmit: this.handleUpdate,\n          children: [\"Insert only data to be modified, a field left empty will be kept untouched.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 84\n          }, this), \"Do not forget to insert the \\\"ID\\\" associated to the post to be updated.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 79\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"id\",\n            name: \"id\",\n            placeholder: \"ID of the post to be updated\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 90\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"userId\",\n            name: \"userId\",\n            placeholder: \"UserId\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 76\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"title\",\n            name: \"title\",\n            placeholder: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 73\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"body\",\n            name: \"body\",\n            placeholder: \"Body of the post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 73\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"submit\",\n            value: \"Update\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"List of posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 7\n      }, this), this.state.posts.map(item => /*#__PURE__*/_jsxDEV(Post, {\n        post: item,\n        delete: this.removePostFromState\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["Post","CreatePost","React","App","Component","constructor","state","posts","loaded","removePostFromState","bind","handleUpdate","fetchData","url","fetch","then","resp","json","setState","console","log","componentDidMount","id","method","updatingArray","slice","index","findIndex","item","splice","event","preventDefault","target","value","trim","title","length","body","userId","alert","isNaN","JSON","stringify","headers","response","document","getElementById","reset","newItem","handleScroll","e","bottomReached","scrollHeight","scrollTop","clientHeight","render","map"],"sources":["/Users/francescomarinelli/Desktop/University/Thesis/interviews-web-mobile-assignment/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport Post from './Post.js';\nimport CreatePost from './CreatePost.js';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      posts: [],\n      loaded: 0\n    };\n\n    this.removePostFromState = this.removePostFromState.bind(this);\n    this.handleUpdate = this.handleUpdate.bind(this);\n  }\n\n  fetchData() {\n    let url = 'https://jsonplaceholder.typicode.com/posts';\n\n    fetch(url)\n      .then(resp => resp.json())\n      .then(resp => {\n        this.setState({posts: resp, loaded: 15})\n      });\n      console.log(\"Fetch concluded\");\n  }\n\n  // the list of posts will be filled after the component is mounted\n  componentDidMount() {\n    this.fetchData();\n}\n\n  removePostFromState(id) {\n    fetch('https://jsonplaceholder.typicode.com/posts/'+id, {\n      method: 'DELETE',\n    });\n\n    let updatingArray = this.state.posts.slice();\n    let index = updatingArray.findIndex(item => item.id === id);\n    updatingArray.splice(index, 1);\n    this.setState({posts: updatingArray});\n  }\n\n  handleUpdate(event) {\n    event.preventDefault();\n    let id = event.target.id.value.trim();\n\n    if (!id || (!event.target.title.value.trim().length &&\n      !event.target.body.value.trim().length && !event.target.userId.value.trim().length)) {\n      alert(\"Fill all the fields properly\");\n      return;\n    }\n\n    if (isNaN(id)) {\n      alert(\"The id must be a number\");\n      return;\n    }\n    let index = this.state.posts.findIndex(item => item.id === id);\n    if(index === -1) {\n      alert(\"The post you want to update is not present\");\n      return;\n    }\n\n    let item = this.state.posts[index];\n    let userId = (!event.target.userId.value.trim().length) ? item.userId : event.target.userId.value;\n    let title = (!event.target.title.value.trim().length) ? item.title : event.target.title.value;\n    let body = (!event.target.body.value.trim().length) ? item.body : event.target.body.value;\n\n    if (isNaN(userId)) {\n      alert(\"The userId must be a number\");\n      return;\n    }\n\n    console.log(id);\n    fetch('https://jsonplaceholder.typicode.com/posts/'+id, {\n  method: 'PUT',\n  body: JSON.stringify({\n    id: id,\n    title: title,\n    body: body,\n    userId: userId,\n  }),\n  headers: {\n    'Content-type': 'application/json; charset=UTF-8',\n  },\n})\n  .then((response) => response.json())\n  .then((json) => console.log(json));\n    alert(\"Post updated\");\n    document.getElementById(\"create-post-form\").reset();\n\n    let newItem = {};\n    newItem.id = id;\n    newItem.title = title;\n    newItem.body = body;\n    newItem.userId = userId;\n    let updatingArray = this.state.posts.slice();\n    updatingArray.splice(index, 1, newItem);\n    this.setState({posts: updatingArray});\n  }\n\n  handleScroll(e) {\n  const bottomReached = e.target.scrollHeight - e.target.scrollTop === e.target.clientHeight;\n  if (bottomReached) {\n\n  }\n}\n\n  render() {\n    return (\n      <div className=\"body\" onScroll={this.handleScroll}>\n      <h1>Welcome to the Beautiful Collection of Posts</h1>\n\n      <details>\n      <summary className='create-summary'>Add a new post</summary>\n        <CreatePost/>\n      </details>\n      <details>\n        <summary className='update-summary'>Modify an existing post</summary>\n        <form id=\"update-post-form\" className=\"post-form\" onSubmit={this.handleUpdate}>\n        Insert only data to be modified, a field left empty will be kept untouched.<br/>\n        Do not forget to insert the \"ID\" associated to the post to be updated.<br/>\n        <input type=\"text\" id=\"id\" name=\"id\" placeholder='ID of the post to be updated'/><br/>\n        <input type=\"text\" id=\"userId\" name=\"userId\" placeholder='UserId'/><br/>\n        <input type=\"text\" id=\"title\" name=\"title\" placeholder='Title'/><br/>\n        <textarea id=\"body\" name=\"body\" placeholder=\"Body of the post\"/><br/>\n        <input type=\"submit\" value=\"Update\"/>\n        </form>\n      </details>\n      <h2>List of posts</h2>\n      {this.state.posts.map((item) => (\n        <Post key={item.id} post={item} delete={this.removePostFromState}/>\n      ))}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}